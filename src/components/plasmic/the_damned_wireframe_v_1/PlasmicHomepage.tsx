// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4Z3UMkZpk9iU1tNC7ianWh
// Component: kWxJ1fA34dtB
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MainMenu from "../../MainMenu"; // plasmic-import: 5OPwbvd_XQK/component
import Button from "../../Button"; // plasmic-import: 9U02DESJlfv/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent

import { useScreenVariants as useScreenVariantssKPzWh1XRaeiy } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: sKPzWh1XRaeiy/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_damned_wireframe_v_1.module.css"; // plasmic-import: 4Z3UMkZpk9iU1tNC7ianWh/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: kWxJ1fA34dtB/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 9vaXCj4SKKO/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: gfMcd0a2-6W/icon
import ProfileSvgrepoComsvgIcon from "./icons/PlasmicIcon__ProfileSvgrepoComsvg"; // plasmic-import: odUkh9DYHA/icon
import imageNjSfrrcy2 from "./images/image.png"; // plasmic-import: njSfrrcy2/picture
import audiopng2Zz4X42Fn from "./images/audiopng2.png"; // plasmic-import: zz4X42Fn_/picture

export type PlasmicHomepage__VariantMembers = {
  synced: "synced";
};

export type PlasmicHomepage__VariantsArgs = {
  synced?: SingleBooleanChoiceArg<"synced">;
};

type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>(
  "synced"
);

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<"div">;
  mainMenu?: p.Flex<typeof MainMenu>;
  spacer?: p.Flex<"div">;
  profile?: p.Flex<"div">;
  testing?: p.Flex<"div">;
  testingFunctions?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  link?: p.Flex<"a">;
  mainContent?: p.Flex<"div">;
  storyPoem?: p.Flex<"div">;
};

export interface DefaultHomepageProps {
  synced?: SingleBooleanChoiceArg<"synced">;
  className?: string;
}

export const defaultHomepage__Args: Partial<PlasmicHomepage__ArgsType> = {};

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultHomepage__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssKPzWh1XRaeiy()
  });

  return (
    <React.Fragment>
      {}
      {}

      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          sty.root,
          { [sty.rootsynced]: hasVariant(variants, "synced", "synced") }
        )}
      >
        <div
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames(projectcss.all, sty.header)}
        >
          <MainMenu
            data-plasmic-name={"mainMenu"}
            data-plasmic-override={overrides.mainMenu}
            className={classNames("__wab_instance", sty.mainMenu, {
              [sty.mainMenusynced]: hasVariant(variants, "synced", "synced")
            })}
          />

          <div
            data-plasmic-name={"spacer"}
            data-plasmic-override={overrides.spacer}
            className={classNames(projectcss.all, sty.spacer, {
              [sty.spacersynced]: hasVariant(variants, "synced", "synced")
            })}
          />

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div
              data-plasmic-name={"profile"}
              data-plasmic-override={overrides.profile}
              className={classNames(projectcss.all, sty.profile)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__epflS)}>
                <div
                  data-plasmic-name={"testing"}
                  data-plasmic-override={overrides.testing}
                  className={classNames(projectcss.all, sty.testing)}
                >
                  <div
                    data-plasmic-name={"testingFunctions"}
                    data-plasmic-override={overrides.testingFunctions}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.testingFunctions
                    )}
                  >
                    {"Testing functions"}
                  </div>

                  <Button
                    className={classNames("__wab_instance", sty.button__hnVyc)}
                    size={"compact" as const}
                  >
                    {"Mint Random"}
                  </Button>
                </div>

                <div
                  className={classNames(projectcss.all, sty.freeBox___5HOlO)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__o0CYd,
                        {
                          [sty.buttonsynced__o0CYdOtsOf]: hasVariant(
                            variants,
                            "synced",
                            "synced"
                          )
                        }
                      )}
                      isDisabled={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : undefined
                      }
                    >
                      {hasVariant(variants, "synced", "synced")
                        ? "Unsync"
                        : "Unsync"}
                    </Button>
                  ) : null}

                  <ProfileSvgrepoComsvgIcon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />

                  <a
                    data-plasmic-name={"link"}
                    data-plasmic-override={overrides.link}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mGgux
                      )}
                    >
                      {"Edit Profile"}
                    </div>
                  </a>

                  <div
                    className={classNames(projectcss.all, sty.freeBox___8Wyow)}
                  />
                </div>
              </div>
            </div>
          ) : null}
        </div>

        {true ? (
          <Reveal
            cascade={false}
            className={classNames("__wab_instance", sty.reveal__ufKEa)}
            delay={1 as const}
            direction={"up" as const}
            effect={"zoom" as const}
            reverse={false}
            triggerOnce={false}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__no8Ea)}
              displayHeight={"100%" as const}
              displayMaxHeight={"1073px" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"216px" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100%" as const}
              loading={"lazy" as const}
              src={{
                src: imageNjSfrrcy2,
                fullWidth: 687,
                fullHeight: 1031,
                aspectRatio: undefined
              }}
            />
          </Reveal>
        ) : null}
        {true ? (
          <Reveal
            cascade={false}
            className={classNames("__wab_instance", sty.reveal___6R2Cn)}
            delay={1 as const}
            direction={"up" as const}
            effect={"zoom" as const}
            reverse={false}
            triggerOnce={false}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__v3QdF)}
              displayHeight={"100%" as const}
              displayMaxHeight={"1073px" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"216px" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100%" as const}
              loading={"lazy" as const}
              src={{
                src: imageNjSfrrcy2,
                fullWidth: 687,
                fullHeight: 1031,
                aspectRatio: undefined
              }}
            />
          </Reveal>
        ) : null}

        <div
          data-plasmic-name={"mainContent"}
          data-plasmic-override={overrides.mainContent}
          className={classNames(projectcss.all, sty.mainContent, {
            [sty.mainContentsynced]: hasVariant(variants, "synced", "synced")
          })}
        >
          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1__nbjLf,
              {
                [sty.h1synced__nbjLfOtsOf]: hasVariant(
                  variants,
                  "synced",
                  "synced"
                )
              }
            )}
          >
            {"Main Content"}
          </h1>

          <div
            data-plasmic-name={"storyPoem"}
            data-plasmic-override={overrides.storyPoem}
            className={classNames(projectcss.all, sty.storyPoem)}
          >
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__qpyG
              )}
            >
              {"Story"}
            </h1>

            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__ySjDx
              )}
            >
              {"Limbo"}
            </h1>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jdBfR
              )}
            >
              {
                "Lost souls wander through the castle of LIMBO, through the cold cobble stones that built up this fortress of woe and desolation, infinite abyss. We must find our escape through corridors of endless woe. But I never lost hope that one day I could be freed from this eternal damnation of apathy and that we would find an escape to enlightenment. Riddles lead us to a secret door, which opens out onto a beautiful blossoming garden."
              }
            </div>

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__qu30I)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: audiopng2Zz4X42Fn,
                fullWidth: 534,
                fullHeight: 108,
                aspectRatio: undefined
              }}
            />

            <div className={classNames(projectcss.all, sty.freeBox__gloM)}>
              <Button
                className={classNames("__wab_instance", sty.button__lzfbK)}
                isDisabled={true}
              >
                {"Story"}
              </Button>

              <div className={classNames(projectcss.all, sty.freeBox__xDn1)} />

              <Button
                className={classNames("__wab_instance", sty.button__frBz6)}
              >
                {"Poem"}
              </Button>
            </div>
          </div>
        </div>
      </p.Stack>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "mainMenu",
    "spacer",
    "profile",
    "testing",
    "testingFunctions",
    "svg",
    "link",
    "mainContent",
    "storyPoem"
  ],
  header: [
    "header",
    "mainMenu",
    "spacer",
    "profile",
    "testing",
    "testingFunctions",
    "svg",
    "link"
  ],
  mainMenu: ["mainMenu"],
  spacer: ["spacer"],
  profile: ["profile", "testing", "testingFunctions", "svg", "link"],
  testing: ["testing", "testingFunctions"],
  testingFunctions: ["testingFunctions"],
  svg: ["svg"],
  link: ["link"],
  mainContent: ["mainContent", "storyPoem"],
  storyPoem: ["storyPoem"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  mainMenu: typeof MainMenu;
  spacer: "div";
  profile: "div";
  testing: "div";
  testingFunctions: "div";
  svg: "svg";
  link: "a";
  mainContent: "div";
  storyPoem: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    mainMenu: makeNodeComponent("mainMenu"),
    spacer: makeNodeComponent("spacer"),
    profile: makeNodeComponent("profile"),
    testing: makeNodeComponent("testing"),
    testingFunctions: makeNodeComponent("testingFunctions"),
    svg: makeNodeComponent("svg"),
    link: makeNodeComponent("link"),
    mainContent: makeNodeComponent("mainContent"),
    storyPoem: makeNodeComponent("storyPoem"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
