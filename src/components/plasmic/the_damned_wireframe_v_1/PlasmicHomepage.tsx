// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4Z3UMkZpk9iU1tNC7ianWh
// Component: kWxJ1fA34dtB
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 9U02DESJlfv/component
import NftButton from "../../NftButton"; // plasmic-import: OWTL5yNhla1/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent

import { useScreenVariants as useScreenVariantssKPzWh1XRaeiy } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: sKPzWh1XRaeiy/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_damned_wireframe_v_1.module.css"; // plasmic-import: 4Z3UMkZpk9iU1tNC7ianWh/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: kWxJ1fA34dtB/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 9vaXCj4SKKO/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: gfMcd0a2-6W/icon
import imageNjSfrrcy2 from "./images/image.png"; // plasmic-import: njSfrrcy2/picture

export type PlasmicHomepage__VariantMembers = {
  synced: "synced";
};

export type PlasmicHomepage__VariantsArgs = {
  synced?: SingleBooleanChoiceArg<"synced">;
};

type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>(
  "synced"
);

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<"div">;
  menu?: p.Flex<"div">;
  qty?: p.Flex<"div">;
  nftButton2?: p.Flex<"div">;
  qty2?: p.Flex<"div">;
  nftButton3?: p.Flex<"div">;
  qty3?: p.Flex<"div">;
  nftButton4?: p.Flex<"div">;
  qty4?: p.Flex<"div">;
  nftButton5?: p.Flex<"div">;
  qty5?: p.Flex<"div">;
  nftButton6?: p.Flex<"div">;
  qty6?: p.Flex<"div">;
  nftButton7?: p.Flex<"div">;
  qty7?: p.Flex<"div">;
  nftButton8?: p.Flex<"div">;
  qty8?: p.Flex<"div">;
  spacer?: p.Flex<"div">;
  profile?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
};

export interface DefaultHomepageProps {
  synced?: SingleBooleanChoiceArg<"synced">;
  className?: string;
}

export const defaultHomepage__Args: Partial<PlasmicHomepage__ArgsType> = {};

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultHomepage__Args, props.args);
  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssKPzWh1XRaeiy()
  });

  return (
    <React.Fragment>
      {}
      {}

      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          sty.root,
          { [sty.rootsynced]: hasVariant(variants, "synced", "synced") }
        )}
      >
        <div
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames(projectcss.all, sty.header)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"menu"}
            data-plasmic-override={overrides.menu}
            hasGap={true}
            className={classNames(projectcss.all, sty.menu)}
          >
            <Button
              className={classNames("__wab_instance", sty.button__tQeMn)}
              size={"compact" as const}
            >
              {"Logo"}
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__ihuIo)}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("compact" as const)
                  : hasVariant(globalVariants, "screen", "smallScreen")
                  ? ("minimal" as const)
                  : ("compact" as const)
              }
            >
              {"Lore"}
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__qRPB)}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("compact" as const)
                  : hasVariant(globalVariants, "screen", "smallScreen")
                  ? ("minimal" as const)
                  : ("compact" as const)
              }
            >
              {"Roadmap"}
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button___7ZyHz)}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("compact" as const)
                  : hasVariant(globalVariants, "screen", "smallScreen")
                  ? ("minimal" as const)
                  : ("compact" as const)
              }
            >
              {"Paint & Sins"}
            </Button>

            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__nX7Hs)}>
                <NftButton
                  className={classNames("__wab_instance", sty.nftButton__pTopd)}
                  size={"compact" as const}
                >
                  {"Limbo"}
                </NftButton>

                <div
                  data-plasmic-name={"qty"}
                  data-plasmic-override={overrides.qty}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.qty
                  )}
                >
                  {"x3"}
                </div>
              </div>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"nftButton2"}
                data-plasmic-override={overrides.nftButton2}
                className={classNames(projectcss.all, sty.nftButton2)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <Button
                    className={classNames("__wab_instance", sty.button__tBnJt)}
                    size={
                      hasVariant(globalVariants, "screen", "smallScreen")
                        ? ("minimal" as const)
                        : ("compact" as const)
                    }
                  >
                    {"Lust"}
                  </Button>
                ) : null}

                <div
                  data-plasmic-name={"qty2"}
                  data-plasmic-override={overrides.qty2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.qty2
                  )}
                >
                  {"x0"}
                </div>
              </div>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"nftButton3"}
                data-plasmic-override={overrides.nftButton3}
                className={classNames(projectcss.all, sty.nftButton3)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <Button
                    className={classNames("__wab_instance", sty.button__jbigo)}
                    size={
                      hasVariant(globalVariants, "screen", "smallScreen")
                        ? ("minimal" as const)
                        : ("compact" as const)
                    }
                  >
                    {"Gluttony"}
                  </Button>
                ) : null}

                <div
                  data-plasmic-name={"qty3"}
                  data-plasmic-override={overrides.qty3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.qty3
                  )}
                >
                  {"x0"}
                </div>
              </div>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"nftButton4"}
                data-plasmic-override={overrides.nftButton4}
                className={classNames(projectcss.all, sty.nftButton4)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <Button
                    className={classNames("__wab_instance", sty.button___0Qeot)}
                    size={
                      hasVariant(globalVariants, "screen", "smallScreen")
                        ? ("minimal" as const)
                        : ("compact" as const)
                    }
                  >
                    {"Greed"}
                  </Button>
                ) : null}

                <div
                  data-plasmic-name={"qty4"}
                  data-plasmic-override={overrides.qty4}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.qty4
                  )}
                >
                  {"x0"}
                </div>
              </div>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"nftButton5"}
                data-plasmic-override={overrides.nftButton5}
                className={classNames(projectcss.all, sty.nftButton5)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <Button
                    className={classNames("__wab_instance", sty.button__lm3PW)}
                    size={
                      hasVariant(globalVariants, "screen", "smallScreen")
                        ? ("minimal" as const)
                        : ("compact" as const)
                    }
                  >
                    {"Anger"}
                  </Button>
                ) : null}

                <div
                  data-plasmic-name={"qty5"}
                  data-plasmic-override={overrides.qty5}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.qty5
                  )}
                >
                  {"x0"}
                </div>
              </div>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"nftButton6"}
                data-plasmic-override={overrides.nftButton6}
                className={classNames(projectcss.all, sty.nftButton6)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <Button
                    className={classNames("__wab_instance", sty.button__wihAz)}
                    size={
                      hasVariant(globalVariants, "screen", "smallScreen")
                        ? ("minimal" as const)
                        : ("compact" as const)
                    }
                  >
                    {"Heresy"}
                  </Button>
                ) : null}

                <div
                  data-plasmic-name={"qty6"}
                  data-plasmic-override={overrides.qty6}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.qty6
                  )}
                >
                  {"x0"}
                </div>
              </div>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"nftButton7"}
                data-plasmic-override={overrides.nftButton7}
                className={classNames(projectcss.all, sty.nftButton7)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <Button
                    className={classNames("__wab_instance", sty.button__sWn0B)}
                    size={
                      hasVariant(globalVariants, "screen", "smallScreen")
                        ? ("minimal" as const)
                        : ("compact" as const)
                    }
                  >
                    {"Violence"}
                  </Button>
                ) : null}

                <div
                  data-plasmic-name={"qty7"}
                  data-plasmic-override={overrides.qty7}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.qty7
                  )}
                >
                  {"x0"}
                </div>
              </div>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"nftButton8"}
                data-plasmic-override={overrides.nftButton8}
                className={classNames(projectcss.all, sty.nftButton8)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <Button
                    className={classNames("__wab_instance", sty.button__sczGf)}
                    size={
                      hasVariant(globalVariants, "screen", "smallScreen")
                        ? ("minimal" as const)
                        : ("compact" as const)
                    }
                  >
                    {"Fraud"}
                  </Button>
                ) : null}

                <div
                  data-plasmic-name={"qty8"}
                  data-plasmic-override={overrides.qty8}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.qty8
                  )}
                >
                  {"x0"}
                </div>
              </div>
            ) : null}

            <Button
              className={classNames("__wab_instance", sty.button__sAhu4)}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("compact" as const)
                  : hasVariant(globalVariants, "screen", "smallScreen")
                  ? ("minimal" as const)
                  : ("compact" as const)
              }
            >
              {"Throne"}
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__ajdeK)}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("compact" as const)
                  : hasVariant(globalVariants, "screen", "smallScreen")
                  ? ("minimal" as const)
                  : ("compact" as const)
              }
            >
              {"FAQ"}
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__exLiq)}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("compact" as const)
                  : hasVariant(globalVariants, "screen", "smallScreen")
                  ? ("minimal" as const)
                  : ("compact" as const)
              }
            >
              {"Team"}
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__d7MV5)}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("compact" as const)
                  : hasVariant(globalVariants, "screen", "smallScreen")
                  ? ("minimal" as const)
                  : ("compact" as const)
              }
            >
              {"Contact"}
            </Button>
          </p.Stack>

          <div
            data-plasmic-name={"spacer"}
            data-plasmic-override={overrides.spacer}
            className={classNames(projectcss.all, sty.spacer)}
          />

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div
              data-plasmic-name={"profile"}
              data-plasmic-override={overrides.profile}
              className={classNames(projectcss.all, sty.profile)}
            >
              <Button
                className={classNames("__wab_instance", sty.button__o0CYd, {
                  [sty.buttonsynced__o0CYdOtsOf]: hasVariant(
                    variants,
                    "synced",
                    "synced"
                  )
                })}
              >
                {hasVariant(variants, "synced", "synced") ? "Unsync" : "Sync"}
              </Button>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mGgux
                )}
              >
                {"Edit Profile"}
              </div>
            </div>
          ) : null}
        </div>

        <h1
          data-plasmic-name={"h1"}
          data-plasmic-override={overrides.h1}
          className={classNames(
            projectcss.all,
            projectcss.h1,
            projectcss.__wab_text,
            sty.h1
          )}
        >
          {"Main Content"}
        </h1>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__qaRpz
          )}
        >
          {""}
        </div>

        {true ? (
          <Reveal
            cascade={false}
            className={classNames("__wab_instance", sty.reveal__ufKEa)}
            delay={1 as const}
            direction={"up" as const}
            effect={"zoom" as const}
            reverse={false}
            triggerOnce={false}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__no8Ea)}
              displayHeight={"100%" as const}
              displayMaxHeight={"1073px" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"216px" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100%" as const}
              loading={"lazy" as const}
              src={{
                src: imageNjSfrrcy2,
                fullWidth: 687,
                fullHeight: 1031,
                aspectRatio: undefined
              }}
            />
          </Reveal>
        ) : null}
        {true ? (
          <Reveal
            cascade={false}
            className={classNames("__wab_instance", sty.reveal___6R2Cn)}
            delay={1 as const}
            direction={"up" as const}
            effect={"zoom" as const}
            reverse={false}
            triggerOnce={false}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__v3QdF)}
              displayHeight={"100%" as const}
              displayMaxHeight={"1073px" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"216px" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100%" as const}
              loading={"lazy" as const}
              src={{
                src: imageNjSfrrcy2,
                fullWidth: 687,
                fullHeight: 1031,
                aspectRatio: undefined
              }}
            />
          </Reveal>
        ) : null}
      </p.Stack>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "menu",
    "qty",
    "nftButton2",
    "qty2",
    "nftButton3",
    "qty3",
    "nftButton4",
    "qty4",
    "nftButton5",
    "qty5",
    "nftButton6",
    "qty6",
    "nftButton7",
    "qty7",
    "nftButton8",
    "qty8",
    "spacer",
    "profile",
    "h1"
  ],
  header: [
    "header",
    "menu",
    "qty",
    "nftButton2",
    "qty2",
    "nftButton3",
    "qty3",
    "nftButton4",
    "qty4",
    "nftButton5",
    "qty5",
    "nftButton6",
    "qty6",
    "nftButton7",
    "qty7",
    "nftButton8",
    "qty8",
    "spacer",
    "profile"
  ],
  menu: [
    "menu",
    "qty",
    "nftButton2",
    "qty2",
    "nftButton3",
    "qty3",
    "nftButton4",
    "qty4",
    "nftButton5",
    "qty5",
    "nftButton6",
    "qty6",
    "nftButton7",
    "qty7",
    "nftButton8",
    "qty8"
  ],
  qty: ["qty"],
  nftButton2: ["nftButton2", "qty2"],
  qty2: ["qty2"],
  nftButton3: ["nftButton3", "qty3"],
  qty3: ["qty3"],
  nftButton4: ["nftButton4", "qty4"],
  qty4: ["qty4"],
  nftButton5: ["nftButton5", "qty5"],
  qty5: ["qty5"],
  nftButton6: ["nftButton6", "qty6"],
  qty6: ["qty6"],
  nftButton7: ["nftButton7", "qty7"],
  qty7: ["qty7"],
  nftButton8: ["nftButton8", "qty8"],
  qty8: ["qty8"],
  spacer: ["spacer"],
  profile: ["profile"],
  h1: ["h1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  menu: "div";
  qty: "div";
  nftButton2: "div";
  qty2: "div";
  nftButton3: "div";
  qty3: "div";
  nftButton4: "div";
  qty4: "div";
  nftButton5: "div";
  qty5: "div";
  nftButton6: "div";
  qty6: "div";
  nftButton7: "div";
  qty7: "div";
  nftButton8: "div";
  qty8: "div";
  spacer: "div";
  profile: "div";
  h1: "h1";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    menu: makeNodeComponent("menu"),
    qty: makeNodeComponent("qty"),
    nftButton2: makeNodeComponent("nftButton2"),
    qty2: makeNodeComponent("qty2"),
    nftButton3: makeNodeComponent("nftButton3"),
    qty3: makeNodeComponent("qty3"),
    nftButton4: makeNodeComponent("nftButton4"),
    qty4: makeNodeComponent("qty4"),
    nftButton5: makeNodeComponent("nftButton5"),
    qty5: makeNodeComponent("qty5"),
    nftButton6: makeNodeComponent("nftButton6"),
    qty6: makeNodeComponent("qty6"),
    nftButton7: makeNodeComponent("nftButton7"),
    qty7: makeNodeComponent("qty7"),
    nftButton8: makeNodeComponent("nftButton8"),
    qty8: makeNodeComponent("qty8"),
    spacer: makeNodeComponent("spacer"),
    profile: makeNodeComponent("profile"),
    h1: makeNodeComponent("h1"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
